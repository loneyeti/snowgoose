services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    user: nextjs
    security_opt:
      - no-new-privileges:true
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/snowgoose
      - NODE_ENV=development
    env_file:
      - .env.local
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next/cache
    restart: unless-stopped
    stdin_open: true
    tty: true
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  db:
    image: postgres:15-alpine
    user: postgres
    security_opt:
      - no-new-privileges:true
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=snowgoose
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
      limits:
        cpus: "1"
        memory: 1G

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
