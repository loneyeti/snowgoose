generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AlembicVersion {
  version_num String @id(map: "alembic_version_pkc") @db.VarChar(32)
}

model APIVendor {
  id     Int     @id @default(autoincrement())
  name   String  @db.VarChar(255)
  models Model[]

  @@map("api_vendor")
}

model ConversationHistory {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  title        String?
  conversation String
  timestamp    DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("conversation_history")
}

model MCPTool {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
  path String @db.VarChar(255)

  @@map("mcp_tool")
}

model Model {
  id                   Int            @id @default(autoincrement())
  apiName              String         @map("api_name") @db.VarChar(255)
  name                 String         @db.VarChar(255)
  isVision             Boolean        @map("is_vision")
  isImageGeneration    Boolean        @map("is_image_generation")
  isWebSearch          Boolean?       @default(false) @map("is_web_search")
  apiVendorId          Int?           @map("api_vendor_id")
  isThinking           Boolean        @default(false) @map("is_thinking")
  inputTokenCost       Float?         @map("input_token_cost")
  outputTokenCost      Float?         @map("output_token_cost")
  imageOutputTokenCost Float?         @map("image_output_token_cost")
  webSearchCost        Float?         @map("web_search_cost")
  paidOnly             Boolean        @default(false) @map("paid_only")
  apiVendor            APIVendor?     @relation(fields: [apiVendorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userSettings         UserSettings[]

  @@map("model")
}

model OutputFormat {
  id           Int         @id @default(autoincrement())
  name         String      @db.VarChar(255)
  prompt       String
  ownerId      Int?        @map("owner_id")
  renderTypeId Int?        @map("render_type_id")
  owner        User?       @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  renderType   RenderType? @relation(fields: [renderTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("output_format")
}

model Persona {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(255)
  prompt  String
  ownerId Int?   @map("owner_id")
  owner   User?  @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("persona")
}

model RenderType {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(255)
  outputFormats OutputFormat[]

  @@map("render_type")
}

model UserSettings {
  id                       Int    @id @default(autoincrement())
  userId                   Int    @map("user_id")
  appearanceMode           String @map("appearance_mode") @db.VarChar(10)
  summaryModelPreferenceId Int?   @map("summary_model_preference_id")
  summaryModel             Model? @relation(fields: [summaryModelPreferenceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                     User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("user_settings")
}

model User {
  id       Int      @id @default(autoincrement())
  username String   @unique @db.VarChar(250)
  email    String?  @db.VarChar(250)
  isAdmin  Boolean? @map("is_admin")
  authId   String?  @unique @db.Uuid

  periodUsage   Float? @default(0.0)
  totalUsage    Float? @default(0.0)
  creditBalance Float? @default(0.0)

  stripeCustomerId            String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId        String?   @unique @map("stripe_subscription_id")
  stripePriceId               String?   @map("stripe_price_id")
  stripeCurrentPeriodBegin    DateTime? @map("stripe_current_period_begin")
  stripeCurrentPeriodEnd      DateTime? @map("stripe_current_period_end")
  stripeSubscriptionStartDate DateTime? @map("stripe_subscription_start_date")
  stripeSubscriptionStatus    String?   @map("stripe_subscription_status")
  stripeCancelAtPeriodEnd     Boolean?  @map("stripe_cancel_at_period_end")

  hasUnlimitedCredits Boolean? @default(false) @map("has_unlimited_credits")
  onboardingCompleted Boolean  @default(false) @map("onboarding_completed")

  conversations      ConversationHistory[]
  outputFormats      OutputFormat[]
  personas           Persona[]
  settings           UserSettings[]
  creditTransactions CreditTransaction[]

  @@map("users")
}

model SubscriptionPlan {
  id             Int     @id @default(autoincrement())
  stripePriceId  String? @unique @map("stripe_price_id")
  name           String
  usageLimit     Float
  creditsGranted Float   @default(0.0)

  @@map("subscription_plan")
}

model CreditTransaction {
  id             String    @id @default(cuid())
  userId         Int
  user           User      @relation(fields: [userId], references: [id])
  creditsAmount  Float // Positive for grants, negative for deductions
  source         String // e.g., 'free-trial', 'subscription-basic', 'one-time-small', 'chat-deduction'
  stripeChargeId String? // Optional, for linking to Stripe
  createdAt      DateTime  @default(now())
  expiresAt      DateTime? // Only for credit grants
}
